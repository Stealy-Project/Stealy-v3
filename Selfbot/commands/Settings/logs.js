const { Client, Message } = require('legend.js');

const logChannels = {
    guilds: "üôä„Éªservs",
    anti_group: "üçú„Éªgroups",
    templates: "üìÑ„Éªbackups",
    ghostpings: "üëª„Éªghostping",
    message_delete: "üôà„Éªdm-del",
    message_update: "üôâ„Éªdm-modif",
    nitro_sniper: "üêÅ„Éªnitros",
    profiles: "üì®„Éªprofiles",
    lock_url: "üîí„Éªlockurl",
    snipe_url: "üéØ„Éªsnipeurl"
};

module.exports = {
    name: "logs",
    /**
     * @param {Client} client
     * @param {Message} message
     * @param {string[]} args 
    */
    run: async (client, message, args) => {
        switch(args[0]){
            default:
                message.edit(client.language(
                    `***__‚Ä∫ Stealy - LOGS__*** <a:star:1345073135095123978>

                    \`${client.db.prefix}logs on/off [type]\` ‚Ä∫ *Permet d'activer ou d√©sactiver une partie de log.*
                    \`${client.db.prefix}logs setup\` ‚Ä∫ *Permet de cr√©e vos logs dans un serveur.*

                    \`${client.db.prefix}logs color [hex]\` ‚Ä∫ *Permet de changer la couleur des embeds.*
                    \`${client.db.prefix}logs list\` ‚Ä∫ *Permet de voir tout les logs.*`.replaceAll('  ', ''),
                    `***__‚Ä∫ Stealy - LOGS__*** <a:star:1345073135095123978>

                    \`${client.db.prefix}logs on/off [type]\` ‚Ä∫ *Allow you to enable or disable a part of your logs.*
                    \`${client.db.prefix}logs setup\` ‚Ä∫ *Allow you to create your logs in a server.*

                    \`${client.db.prefix}logs color [hex]\` ‚Ä∫ *Allow you to change the color of the embeds.*
                    \`${client.db.prefix}logs list\` ‚Ä∫ *Allow you to see all your logs.*`
                ))
                break;

            case 'on':
                if (!args[1]) 
                    return message.edit(client.language(
                        "Veuillez sp√©cifier le type de logs √† activer.", 
                        "Please specify the type of logs to activate."
                    ));

                if (!Object.keys(client.db.logger).includes(args[1]))
                    return message.edit(client.language(
                        "Le type de logs n'existe pas.",
                        "The type of logs does not exist."
                    ));

                client.db.logger[args[1]].enabled = true;
                client.save();

                message.edit(client.language(
                    `*Le type de logs **${args[1]}** est maintenant activ√©.*`,
                    `*The type of logs **${args[1]}** is now enabled.*`
                ))
                break;

            case 'off':
                if (!args[1])
                    return message.edit(client.language(
                        "Veuillez sp√©cifier le type de logs √† d√©sactiver.",
                        "Please specify the type of logs to deactivate."
                    ));

                if (!Object.keys(client.db.logger).includes(args[1]))
                    return message.edit(client.language(
                        "Le type de logs n'existe pas.",
                        "The type of logs does not exist."
                    ));

                client.db.logger[args[1]].enabled = false;
                client.save();

                message.edit(client.language(
                    `*Le type de logs **${args[1]}** est maintenant d√©sactiv√©.*`,
                    `*The type of logs **${args[1]}** is now disabled.*`
                ));
                break;

            case 'list':
                message.edit(`***__‚Ä∫ Stealy - LOGS__*** <a:star:1345073135095123978>
                    ${Object.keys(client.db.logger).map(r => `> ***${capitalizeAfterSpace(r.replaceAll('_', '  '))} : ${client.db.logger[r] && client.db.logger[r]?.enable ? "<:on:1345720302105002036>" : "<:off:1327710569184366726>"}***`).join('\n')}`)
                break;

            case 'color':
                if (!args[1] || !/^#[A-Fa-f0-9]{6}$/.test(args[1])) 
                    return message.edit(client.language(
                        "Veuillez sp√©cifier une couleur valide en hexad√©cimal.",
                        "Please specify a valid hexadecimal color."
                    ));

                client.db.log_color = args[1].replace('#', '');
                client.save();
                message.edit(client.language(
                    `La couleur des embeds a bien √©t√© chang√©e.`,
                    `The color of the embed has been changed.`
                ));
                break;

            case 'setup':
                if (!message.guild.me.permissions.has("MANAGE_CHANNELS"))
                    return message.edit(client.language(
                        "Je n'ai pas la permission de g√©rer les salons.",
                        "I don't have permissions to manage channels."
                    ));

                let category = message.guild.channels.find(c => c.name === `Stealy - ${message.author.username}` && c.type === "category")
                if (!category) category = await message.guild.createChannel(`Stealy - ${message.author.username}`, {
                    type: "category",
                    permissionOverwrites: [
                        {
                            id: message.guild.id,
                            deny: ["VIEW_CHANNEL"]
                        }
                    ]
                });

                for (const [ type, channelName ] of Object.entries(logChannels)) {
                    const logchannel = message.guild.channels.find(c => c.name === channelName);

                    if (logchannel) {
                        const webhooks = await logchannel.fetchWebhooks().catch(() => false)
                        let webhook = webhooks?.first()

                        if (!webhook) webhook = await logchannel.createWebhook(channelName, 'https://i.imgur.com/TPRGKbj.png').catch(() => false)
                        if (!webhook) continue;

                        client.db.logger[type].url = webhook.url;
                        client.save();
                        message.edit(client.language(
                            "*Les logs ont √©t√© configur√©s avec succ√®s.*",
                            "*Logs have been successfully set up.*"
                        ));
                    }
                    else {
                        const channel = await message.guild.createChannel(channelName, {
                            type: "text",
                            parent: category,
                            permissionOverwrites: [
                                {
                                    id: message.guild.id,
                                    deny: ["VIEW_CHANNEL"]
                                }
                            ]
                        });
                        channel.setParent(category);

                        const webhook = await channel.createWebhook(channelName, 'https://i.imgur.com/TPRGKbj.png').catch(() => false);
                        if (webhook) client.db.logger[type].url = webhook.url;
                    }
                }

                client.save();
                message.edit(client.language(
                    "*Les logs ont √©t√© configur√©s avec succ√®s.*",
                    "*Logs have been successfully set up.*"
                ));
                break;
        }
    }
};

/**
 * @param {string} str
 * @returns {string}
*/
function capitalizeAfterSpace(str) {
  return str
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}